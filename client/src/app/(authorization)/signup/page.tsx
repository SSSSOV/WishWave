"use client"
import Button from "@/components/ui/buttons/Button"
import { ThemeToggle } from "@/components/ui/buttons/ThemeToggle"
import ContentContainer from "@/components/ui/content/Content"
import Input from "@/components/ui/inputs/Input"
import Monogram from "@/components/ui/monogram/Monogram"
import Section from "@/components/ui/section/Section"
import { useRouter } from "next/navigation"
import { useEffect, useState } from "react"
import { AxiosError } from "axios"
import styles from "@/app/home.module.css"
import { $isAuth, handleSignUp, handleVerify } from "@/context/user"
import { useUnit } from "effector-react"
import Container from "@/components/ui/container/Container"
import toast, { Toaster } from "react-hot-toast"
import Loader from "@/components/ui/loader/Loader"
import ListItem from "@/components/ui/list/ListItem"
import List from "@/components/ui/list/List"

// export const metadata: Metadata = {
//   title: "Регистрация - WishWave",
//   description: "Generated by create next app",
// };

export default function SignupPage() {
  // Маршрутизатор
  const router = useRouter()

  // Переменные
  const [email, setEmail] = useState("")
  const [login, setLogin] = useState("")
  const [password, setPassword] = useState("")
  const [repeatPassword, setRepeatPassword] = useState("")
  const [loginOrEmail, setLoginOrEmail] = useState("")
  const [code, setCode] = useState("")
  const [isVerification, setIsVerification] = useState(false)
  const [isAgree, setIsAgree] = useState(false)

  // Контекст
  const [signUp, verify, isAuth] = useUnit([handleSignUp, handleVerify, $isAuth])

  // Обработчик авторизации
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!isAgree) {
      toast.error("Пожалуйста, ознакомьтесь с документами!")
      return
    }
    if (password != repeatPassword) {
      toast.error("Пароли не совпадают!")
      return
    }
    try {
      signUp({ login, email, password })
      setLoginOrEmail(email)
      setIsVerification(true)
    } catch (error) {
      console.log(error)
    }
  }

  const verifyUser = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      verify({ loginOrEmail, code })
    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    if (isAuth) router.replace("profile/")
  }, [isAuth])

  return (
    <>
      <ThemeToggle isAbsolute></ThemeToggle>
      <ContentContainer topBarSize="none" navigationType="none" withPad isScreen>
        <Container withRadius>
          <Loader fit></Loader>
          {/* <Section align_items="center" items_direction="row" padding_bot_size="lg" padding_top_size="lg">
            <Monogram monogram_type="monogram" letter="ww" size="md" color="primary"></Monogram>
            <Monogram monogram_type="icon" icon="person_add" size="md" color="secondary"></Monogram>
            <Monogram monogram_type="icon" icon="app_registration" size="md" color="tertiary"></Monogram>
          </Section> */}
          {!isVerification && (
            <>
              <form action="signup" onSubmit={handleSubmit}>
                <Section title="Нет аккаунта? Создайте!" title_size="md">
                  <Input
                    labelText="Почта"
                    leadingIcon="mail"
                    type="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                  <Input
                    labelText="Логин"
                    leadingIcon="person"
                    type="text"
                    id="login"
                    minLength={3}
                    maxLength={10}
                    value={login}
                    onChange={(e) => setLogin(e.target.value)}
                    required
                  />
                  <Input
                    labelText="Пароль"
                    leadingIcon="password_2"
                    type="password"
                    id="password"
                    minLength={5}
                    maxLength={20}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                  />
                  <Input
                    labelText={repeatPassword ? (repeatPassword == password ? "Пароли совпадают" : "Пароли не совпадают") : "Повторите пароль"}
                    leadingIcon={repeatPassword ? (repeatPassword == password ? "password_2" : "password_2_off") : "password_2"}
                    type="password"
                    id="repeat_password"
                    minLength={5}
                    maxLength={20}
                    value={repeatPassword}
                    onChange={(e) => setRepeatPassword(e.target.value)}
                    required
                  />
                  <Section items_direction="row" withoutPad align_items="center">
                    <Button
                      icon={isAgree ? "check_box" : "check_box_outline_blank"}
                      variant="text"
                      type="button"
                      onClick={() => {
                        setIsAgree(!isAgree)
                      }}></Button>
                    <span className={styles.label}>
                      Продолжая, вы соглашаетесь с{" "}
                      <a className={styles.link} href="/documents#terms" target="_blank" rel="noopener noreferrer">
                        Условиями обслуживания WishWave
                      </a>{" "}
                      и подтверждаете, что ознакомились с нашей{" "}
                      <a className={styles.link} href="/documents#policy" target="_blank" rel="noopener noreferrer">
                        Политикой конфиденциальности
                      </a>
                      .
                    </span>
                  </Section>

                  <Button variant={isAgree ? "filled" : "outlined"} isFit={false} type="submit">
                    {isAgree ? "Зарегистрироваться" : "Ознакомьтесь с документами"}
                  </Button>
                </Section>
              </form>
              <Section align_items="center" padding_top_size="md" padding_bot_size="md">
                <Section items_direction="row" isFit>
                  Уже есть аккаунт?
                  <Button variant="text" isPadNone onClick={() => router.push("/login")}>
                    Войдите
                  </Button>
                </Section>
              </Section>
            </>
          )}
          {isVerification && (
            <>
              <form action="signup" onSubmit={verifyUser}>
                <Section title="Введите код подтверждения!" title_size="md">
                  <Input
                    labelText="Почта или логин"
                    leadingIcon="mail"
                    type="text"
                    id="loginOrEmail"
                    value={loginOrEmail}
                    onChange={(e) => setLoginOrEmail(e.target.value)}
                    required
                  />

                  <Input
                    labelText="Код"
                    leadingIcon="password_2"
                    type="text"
                    id="code"
                    minLength={5}
                    maxLength={10}
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    required
                  />

                  <Button variant="filled" isFit={false} type="submit">
                    Зарегистрироваться
                  </Button>
                </Section>
              </form>
              <Section align_items="center" padding_top_size="lg">
                <Section items_direction="row" isFit>
                  Уже есть аккаунт?
                  <Button variant="text" isPadNone onClick={() => router.push("/login")}>
                    Войдите
                  </Button>
                </Section>
              </Section>
            </>
          )}
        </Container>
      </ContentContainer>
      <Toaster
        position="bottom-center"
        toastOptions={{
          // Define default options
          icon: null,
          className: "toast",
          duration: 2000,
          removeDelay: 1000,
        }}
      />
    </>
  )
}
